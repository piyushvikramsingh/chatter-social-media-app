# Backend Dockerfile for Chatter Social Media App
FROM php:8.2-fpm-alpine

# Install system dependencies
RUN apk add --no-cache \
    build-base \
    curl \
    zip \
    unzip \
    nodejs \
    npm \
    sqlite \
    sqlite-dev \
    oniguruma-dev \
    libxml2-dev \
    freetype-dev \
    libjpeg-turbo-dev \
    libpng-dev \
    libzip-dev

# Install PHP extensions
RUN docker-php-ext-configure gd --with-freetype --with-jpeg \
    && docker-php-ext-install \
        pdo \
        pdo_sqlite \
        mbstring \
        xml \
        ctype \
        json \
        tokenizer \
        zip \
        gd \
        bcmath

# Install Composer
COPY --from=composer:2 /usr/bin/composer /usr/bin/composer

# Set working directory
WORKDIR /var/www/html

# Copy composer files first for better caching
COPY chatter_backend/composer.json chatter_backend/composer.lock ./

# Install PHP dependencies
RUN composer install --no-dev --optimize-autoloader --no-scripts

# Copy package.json for Node dependencies
COPY chatter_backend/package*.json ./

# Install Node dependencies
RUN npm ci --only=production

# Copy application code
COPY chatter_backend/ .

# Copy environment file
COPY docker/backend/.env.docker .env

# Generate application key and optimize
RUN php artisan key:generate --force \
    && php artisan config:cache \
    && php artisan route:cache \
    && php artisan view:cache

# Build frontend assets
RUN npm run production

# Create SQLite database
RUN touch database/database.sqlite \
    && php artisan migrate --force

# Set permissions
RUN chown -R www-data:www-data /var/www/html \
    && chmod -R 755 /var/www/html \
    && chmod -R 775 storage bootstrap/cache

# Install nginx
RUN apk add --no-cache nginx

# Copy nginx configuration
COPY docker/backend/nginx.conf /etc/nginx/nginx.conf
COPY docker/backend/default.conf /etc/nginx/http.d/default.conf

# Copy startup script
COPY docker/backend/start.sh /usr/local/bin/start.sh
RUN chmod +x /usr/local/bin/start.sh

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost/api/fetchSetting || exit 1

# Start services
CMD ["/usr/local/bin/start.sh"]